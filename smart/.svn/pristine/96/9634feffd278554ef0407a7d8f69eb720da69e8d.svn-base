package com.lb.app.automation.service;

import java.util.ArrayList;
import java.util.List;

import javax.transaction.Transactional;

import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.web.bind.annotation.RequestParam;

import ch.ralscha.extdirectspring.annotation.ExtDirectMethod;
import ch.ralscha.extdirectspring.annotation.ExtDirectMethodType;

import com.lb.app.automation.dao.IAutoModuleDao;
import com.lb.app.automation.model.AutoModule;
import com.lb.app.automation.model.AutoSubModule;
import com.lb.app.common.tree.Node;

@Service
@Transactional
public class AutoModuleService {

	final private static Log log = LogFactory.getLog(AutoModuleService.class);

	@Autowired
	IAutoModuleDao autoModuleDao;
	
	public List<AutoModule> saveOrUpdate(List<AutoModule> modules){
		log.info("service: automodule save...");
		for(AutoModule m: modules){
			autoModuleDao.saveOrUpdate(m);
		}
		return modules;
	}
	
	public List<AutoModule> load(){
		return autoModuleDao.queryAll();
	}
	
	@ExtDirectMethod(value = ExtDirectMethodType.TREE_LOAD)
	public List<Node> getTree(@RequestParam(value = "id", required = false) String id,
		@RequestParam(value = "type", required = false, defaultValue = "defaultValue") String foo) {

		List<Node> result = new ArrayList<Node>();
		List<AutoModule> modules = autoModuleDao.queryAll();
		for (AutoModule m : modules) {
			Node n = new Node();
			n.id = m.getModuleid();
			n.leaf = m.getSubmodules().size() <= 0;
			n.text = m.getModulename();
			if(!n.leaf){
				List<Node> list_sm = new ArrayList<Node>();
				for(AutoSubModule sm : m.getSubmodules()){
					Node sn = new Node();
					sn.id = sm.getSubmoduleid();
					sn.leaf = true;
					sn.text = sm.getSubmodulename();
					list_sm.add(sn);
				}
				n.children = list_sm.toArray(new Node[list_sm.size()]);
			}

			result.add(n);
		 }
		
	    
	    return result;
	  }
	
}
